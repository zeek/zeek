# Copyright (c) 2023, NCC Group / Fox-IT. See COPYING for details.
# Copyright (c) 2023 by the Zeek Project. See COPYING for details.

module QUIC;

import spicy;
import zeek;

# The interface to the C++ code that handles the decryption of the INITIAL packet payload using well-known keys
public function decrypt_crypto_payload(
  version: uint32,
  data: bytes,
  connection_id: bytes,
  encrypted_offset: uint64,
  payload_offset: uint64,
  from_client: bool
): bytes &cxxname="QUIC_decrypt_crypto_payload";


##############
## Context - tracked in one connection
##############

# Can we decrypt?
function can_decrypt(long_header: LongHeaderPacket, context: ConnectionIDInfo, is_client: bool): bool {

  if ( ! long_header.is_initial )
    return False;

  if ( is_client )
    return ! context.client_initial_processed;

  # This is the responder, can only decrypt if we have an initial
  # destination_id from the client
  return context.client_initial_processed
          && |context.initial_destination_conn_id| > 0
          && ! context.server_initial_processed;
}

type ConnectionIDInfo = struct {
  client_cid_len: uint8;
  server_cid_len: uint8;

  # The DCID used by the client is employed by client and
  # server for packet protection. Packet re-ordering
  # will make life miserable.
  #
  # https://quicwg.org/base-drafts/rfc9001.html#appendix-A
  initial_destination_conn_id: bytes;

  # Currently, this analyzer assumes that ClientHello
  # and ServerHello fit into the first INITIAL packet (and
  # that there is only one that we're interested in.
  #
  # But minimally the following section sounds like this might not
  # hold in general and the Wireshark has samples showing
  # the handshake spanning across more than two INITIAL packets.
  # (quic-fragmented-handshakes.pcapng.gz)
  #
  # https://datatracker.ietf.org/doc/html/rfc9001#section-4.3
  #
  # Possible fix is to buffer up all CRYPTO frames across multiple
  # INITIAL packets until we see a non-INITIAL frame.
  #
  # We also rely heavily on getting originator and responder right.
  #
  client_initial_processed: bool;
  server_initial_processed: bool;

  ssl_handle: zeek::ProtocolHandle &optional;
};

##############
# Definitions
##############
const VersionDraft22: uint32 = 0xff000016;
const VersionDraft23: uint32 = 0xff000017;
const VersionDraft24: uint32 = 0xff000018;
const VersionDraft25: uint32 = 0xff000019;
const VersionDraft26: uint32 = 0xff00001a;
const VersionDraft27: uint32 = 0xff00001b;
const VersionDraft28: uint32 = 0xff00001c;
const VersionDraft29: uint32 = 0xff00001d;
const VersionDraft30: uint32 = 0xff00001e;
const VersionDraft31: uint32 = 0xff00001f;
const VersionDraft32: uint32 = 0xff000020;
const VersionDraft33: uint32 = 0xff000021;
const VersionDraft34: uint32 = 0xff000022;
const VersionFace001: uint32 = 0xfaceb001;
const VersionFace002: uint32 = 0xfaceb002;
const VersionFace00e: uint32 = 0xfaceb00e;
const VersionFace011: uint32 = 0xfaceb011;
const VersionFace012: uint32 = 0xfaceb012;
const VersionFace013: uint32 = 0xfaceb013;
const Version1: uint32 = 0x00000001;
const Version2: uint32 = 0x6b3343cf;

type LongPacketTypeV1 = enum {
  INITIAL         = 0,
  ZERO_RTT        = 1,
  HANDSHAKE       = 2,
  RETRY           = 3,
};

# V2 changed packet types to avoid ossification.
#
# https://www.rfc-editor.org/rfc/rfc9369.html#name-long-header-packet-types
type LongPacketTypeV2 = enum {
  INITIAL         = 1,
  ZERO_RTT        = 2,
  HANDSHAKE       = 3,
  RETRY           = 0,
};

type HeaderForm = enum {
  SHORT           = 0,
  LONG            = 1,
};

type FrameType = enum {
  PADDING                 = 0x00,
  PING                    = 0x01,
  ACK1                    = 0x02,
  ACK2                    = 0x03,
  RESET_STREAM            = 0x04,
  STOP_SENDING            = 0x05,
  CRYPTO                  = 0x06,
  NEW_TOKEN               = 0x07,
  STREAM1                 = 0x08,
  STREAM2                 = 0x09,
  STREAM3                 = 0x0a,
  STREAM4                 = 0x0b,
  STREAM5                 = 0x0c,
  STREAM6                 = 0x0d,
  STREAM7                 = 0x0e,
  STREAM8                 = 0x0f,
  MAX_DATA                = 0x10,
  MAX_STREAM_DATA         = 0x11,
  MAX_STREAMS1            = 0x12,
  MAX_STREAMS2            = 0x13,
  DATA_BLOCKED            = 0x14,
  STREAM_DATA_BLOCKED     = 0x15,
  STREAMS_BLOCKED1        = 0x16,
  STREAMS_BLOCKED2        = 0x17,
  NEW_CONNECTION_ID       = 0x18,
  RETIRE_CONNECTION_ID    = 0x19,
  PATH_CHALLENGE          = 0x1a,
  PATH_RESPONSE           = 0x1b,
  CONNECTION_CLOSE1       = 0x1c,
  CONNECTION_CLOSE2       = 0x1d,
  HANDSHAKE_DONE          = 0x1e,
};

##############
# Helper units
##############

type VariableLengthInteger = unit {
  var bytes_to_parse: uint64;
  var result_: uint64;

  # Value of the two most significant bits indicates number of bytes
  # to parse for the variable length integer.
  #
  # https://datatracker.ietf.org/doc/rfc9000/
  # Section 16 and Appendix A
  : uint8 {
    self.bytes_to_parse = 2**((0xC0 & $$) >> 6);
    self.result_ = $$ & 0x3F;
  }

  : uint8[self.bytes_to_parse - 1] if (self.bytes_to_parse > 1) foreach {
    self.result_ = (self.result_ << 8) | $$;
  }
};

##############
# Long packets
# Generic units
##############
public type LongHeaderPacketV1 = unit(inout outer: LongHeaderPacket) {
  switch ( LongPacketTypeV1(outer.first_byte.packet_type) ) {
    LongPacketTypeV1::INITIAL -> initial_hdr : InitialPacket(outer) {
      outer.is_initial = True;
      outer.encrypted_offset = outer.offset() +
                               self.initial_hdr.length.bytes_to_parse +
                               self.initial_hdr.token_length.bytes_to_parse +
                               self.initial_hdr.token_length.result_;
      outer.payload_length = self.initial_hdr.length.result_;
    }

    LongPacketTypeV1::ZERO_RTT -> zerortt_hdr : ZeroRTTPacket(outer);
    LongPacketTypeV1::HANDSHAKE -> handshake_hdr : HandshakePacket(outer);
    LongPacketTypeV1::RETRY -> retry_hdr : RetryPacket(outer) {
        outer.is_retry = True;
    }
  };
};

public type LongHeaderPacketV2 = unit(inout outer: LongHeaderPacket) {
  switch ( LongPacketTypeV2(outer.first_byte.packet_type) ) {
    LongPacketTypeV2::INITIAL -> initial_hdr : InitialPacket(outer) {
      outer.is_initial = True;
      outer.encrypted_offset = outer.offset() +
                                self.initial_hdr.length.bytes_to_parse +
                                self.initial_hdr.token_length.bytes_to_parse +
                                self.initial_hdr.token_length.result_;
      outer.payload_length = self.initial_hdr.length.result_;
    }

    LongPacketTypeV2::ZERO_RTT -> zerortt_hdr : ZeroRTTPacket(outer);
    LongPacketTypeV2::HANDSHAKE -> handshake_hdr : HandshakePacket(outer);
    LongPacketTypeV2::RETRY -> retry_hdr : RetryPacket(outer) {
        outer.is_retry = True;
    }
  };
};

# Just eat the data for event raising.
public type UnhandledVersion = unit(header: LongHeaderPacket) {
  var header: LongHeaderPacket = header;
  payload: skip bytes &eod;
};

public type LongHeaderPacket = unit {
  var encrypted_offset: uint64;
  var payload_length: uint64;
  var client_conn_id_length: uint8;
  var server_conn_id_length: uint8;
  var is_initial: bool;
  var is_retry: bool;

  first_byte: bitfield(8) {
      header_form: 7 &convert=cast<HeaderForm>(cast<uint8>($$));
      fixed_bit: 6;
      packet_type: 4..5;
      type_specific_bits: 0..3 &convert=cast<uint8>($$);
  };

  version: uint32;
  dest_conn_id_len: uint8 { self.server_conn_id_length = $$; }
  dest_conn_id: bytes &size=self.server_conn_id_length;
  src_conn_id_len: uint8 { self.client_conn_id_length = $$; }
  src_conn_id: bytes &size=self.client_conn_id_length;

  switch ( self.version ) {
    VersionDraft22,
    VersionDraft23,
    VersionDraft24,
    VersionDraft25,
    VersionDraft26,
    VersionDraft27,
    VersionDraft28,
    VersionDraft29,
    VersionDraft30,
    VersionDraft31,
    VersionDraft32,
    VersionDraft33,
    VersionDraft34,
    VersionFace001,
    VersionFace002,
    VersionFace00e,
    VersionFace011,
    VersionFace012,
    VersionFace013,
    Version1 -> v1: LongHeaderPacketV1(self);
    Version2 -> v2: LongHeaderPacketV2(self);
    * -> unknown: UnhandledVersion(self) {
      throw "unhandled QUIC version 0x%x" % self.version;
    }
  };
};

# A QUIC Frame.
public type Frame = unit(header: LongHeaderPacket, from_client: bool, crypto_sink: sink&) {
  frame_type : uint8 &convert=cast<FrameType>($$);

  # TODO: add other FrameTypes as well
  switch ( self.frame_type ) {
    FrameType::ACK1 -> a: ACKPayload;
    FrameType::ACK2 -> b: ACKPayload;
    FrameType::CRYPTO -> c: CRYPTOPayload(from_client) {
      # Have the sink re-assemble potentially out-of-order cryptodata
      crypto_sink.write(self.c.cryptodata, self.c.offset.result_);
    }
    FrameType::CONNECTION_CLOSE1 -> : ConnectionClosePayload(header);
    FrameType::PADDING -> : skip /\x00*/;  # eat the padding
    FrameType::PING -> : void;
    * -> : void {
      throw "unhandled frame type %s in %s" % (self.frame_type, header.first_byte.packet_type);
    }
  };
};

type CRYPTOPayload = unit(from_client: bool) {
  offset: VariableLengthInteger;
  length: VariableLengthInteger;
  cryptodata: bytes &size=self.length.result_;
};

type ACKPayload = unit {
  latest_ack: VariableLengthInteger;
  ack_delay: VariableLengthInteger;
  ack_range_count: VariableLengthInteger;
  first_ack_range: VariableLengthInteger;
};

type ConnectionClosePayload = unit(header: LongHeaderPacket) {
  var header: LongHeaderPacket = header;
  error_code: VariableLengthInteger;
  switch {
    -> unknown_frame_type: b"\x00";
    -> frame_type: VariableLengthInteger;
  };
  reason_phrase_length: VariableLengthInteger;
  reason_phrase: bytes &size=self.reason_phrase_length.result_;
};


##############
# Long packets
# Specific long packet type units
##############

# Remainder of an Initial packet
type InitialPacket = unit(header: LongHeaderPacket) {
  var header: LongHeaderPacket = header;
  token_length: VariableLengthInteger;
  token: bytes &size=self.token_length.result_;

  # 5.4.2. Header Protection Sample
  #
  #   That is, in sampling packet ciphertext for header
  #   protection, the Packet Number field is assumed to
  #   be 4 bytes long (its maximum possible encoded length).
  #
  # Enforce 4 bytes Packet Number length + 16 bytes sample
  # ciphertext available.
  length: VariableLengthInteger &requires=self.length.result_ >= 20;

  # Consume the remainder of payload. This
  # includes the packet number field, but we
  # do not know its length yet. We need the
  # payload for sampling, however.
  payload: skip bytes &size=self.length.result_;
};

type ZeroRTTPacket = unit(header: LongHeaderPacket) {
  var header: LongHeaderPacket = header;
  length: VariableLengthInteger;
  payload: skip bytes &size=self.length.result_;
};

type HandshakePacket = unit(header: LongHeaderPacket) {
  var header: LongHeaderPacket = header;
  length: VariableLengthInteger;
  payload: skip bytes &size=self.length.result_;
};


type RetryPacket = unit(header: LongHeaderPacket) {
  var header: LongHeaderPacket = header;
  var retry_token: bytes;
  var integrity_tag: bytes;

  # A retry packet ends with a 128bit / 16 byte integrity
  # tag, but otherwise we do not know anything about the
  # size of the retry_token. Slurp the whole datagram and
  # post split it into the distinct parts.
  data: bytes &eod {
    self.retry_token = self.data.sub(0, |self.data| - 16);
    self.integrity_tag = self.data.sub(|self.data| - 16, |self.data|);
  }
};

##############
# Short packets
##############

# TODO: implement
public type ShortHeader = unit(dest_conn_id_length: uint8) {
  first_byte:  bitfield(8) {
      header_form: 7 &convert=cast<HeaderForm>(cast<uint8>($$));
      fixed_bit: 6;
      spin_bit: 5;
      todo: 0..4;
    };
    dest_conn_id: bytes &size=dest_conn_id_length;
};

# TODO: investigate whether we can parse something useful out of this
public type ShortPacketPayload = unit {
  payload: skip bytes &eod;
};

# TODO: investigate whether we can do something useful with this
public type EncryptedLongPacketPayload = unit {
  payload: skip bytes &eod;
};

# Buffer all crypto messages (which might be fragmented and unordered)
# into the following unit.
type CryptoBuffer = unit() {

  var buffered: bytes;

  : bytes &chunked &eod {
    self.buffered += $$;
    # print "crypto_buffer got data", |$$|, |self.buffered|;
  }
};

##############
# QUIC packet parsing
#
# A UDP datagram contains one or more QUIC packets.
##############
type Packet = unit(from_client: bool, context: ConnectionIDInfo&) {
  var decrypted_data: bytes;
  var packet_size: uint64 = 0;
  var start: iterator<stream>;

  sink crypto_sink;
  var crypto_buffer: CryptoBuffer&;

  # Attach an SSL analyzer to this connection once.
  on %init {
    if ( ! context?.ssl_handle ) {
      context.ssl_handle = zeek::protocol_handle_get_or_create("SSL");
    }

    self.start = self.input();
  }

  # Peek into the first byte and determine the header type.
  first_byte: bitfield(8) {
    header_form: 7 &convert=HeaderForm($$);
  };

  # TODO: Consider bitfield based look-ahead-parsing in the switch below
  #       to avoid this rewinding here. It's a hack.
  : void {
    self.set_input(self.start);  # rewind
  }


  # Depending on the header, parse it and update the src/dest ConnectionID's
  switch ( self.first_byte.header_form ) {
    HeaderForm::SHORT -> short_header: ShortHeader(context.client_cid_len);
    HeaderForm::LONG -> long_header: LongHeaderPacket {
        # For now, only allow a change of src/dest ConnectionID's for INITIAL packets.

        # If we see a retry packet from the responder, reset the decryption
        # context such that the next DCID from the client is used for decryption.
        if ( self.long_header.is_retry ) {
          context.client_initial_processed = False;
          context.server_initial_processed = False;
          context.initial_destination_conn_id = b"";

          # Allow re-opening the SSL analyzer the next time around.
          zeek::protocol_handle_close(context.ssl_handle);
          unset context.ssl_handle;
        }
     }
  };

  : void {
      if (self?.long_header && can_decrypt(self.long_header, context, from_client))
          # If we have parsed an initial packet that we can decrypt the payload,
          # determine the size to store into a buffer.
          self.packet_size = self.offset();
  }

  # Buffer the whole packet if we determined we have a chance to decrypt.
  packet_data: bytes &parse-at=self.start &size=self.packet_size if ( self.packet_size > 0 ) {
    self.crypto_buffer = new CryptoBuffer();
    self.crypto_sink.connect(self.crypto_buffer);

    if ( from_client ) {
      context.server_cid_len = self.long_header.dest_conn_id_len;
      context.client_cid_len = self.long_header.src_conn_id_len;

      # This means that here, we can try to decrypt the initial packet!
      # All data is accessible via the `long_header` unit
      self.decrypted_data = decrypt_crypto_payload(
        self.long_header.version,
        self.packet_data,
        self.long_header.dest_conn_id,
        self.long_header.encrypted_offset,
        self.long_header.payload_length,
        from_client
      );

      # Assuming that the client set up the connection, this can be considered the first
      # received Initial from the client. So disable change of ConnectionID's afterwards
      if ( |context.initial_destination_conn_id| == 0 ) {
        context.initial_destination_conn_id = self.long_header.dest_conn_id;
      }

    } else {
      context.server_cid_len = self.long_header.src_conn_id_len;
      context.client_cid_len = self.long_header.dest_conn_id_len;

      self.decrypted_data = decrypt_crypto_payload(
        self.long_header.version,
        self.packet_data,
        context.initial_destination_conn_id,
        self.long_header.encrypted_offset,
        self.long_header.payload_length,
        from_client
      );
    }

    # We attempted decryption, but it failed. Just reject the
    # input and assume Zeek will disable the analyzer for this
    # connection.
    if ( |self.decrypted_data| == 0 )
      throw "decryption failed";

    # We were able to decrypt the INITIAL packet. Confirm QUIC!
    spicy::accept_input();
  }

  # Depending on the type of header and whether we were able to decrypt
  # some of it, parse the remaining payload.
  : ShortPacketPayload if (self.first_byte.header_form == HeaderForm::SHORT);
  : EncryptedLongPacketPayload if (self.first_byte.header_form == HeaderForm::LONG && |self.decrypted_data| == 0);

  # If this was packet with a long header and decrypted data exists, attempt
  # to parse the plain QUIC frames from it.
  frames: Frame(self.long_header, from_client, self.crypto_sink)[] &parse-from=self.decrypted_data if (self.first_byte.header_form == HeaderForm::LONG && |self.decrypted_data| > 0);

  # Once the Packet is fully parsed, pass the accumulated CRYPTO frames
  # to the SSL analyzer as handshake data.
  on %done {
    # print "packet done", zeek::is_orig(), self.first_byte.header_form, |self.decrypted_data|;

    if ( self.crypto_buffer != Null && |self.crypto_buffer.buffered| > 0 ) {
      local handshake_data = self.crypto_buffer.buffered;

      # The data is passed to the SSL analyzer as part of a HANDSHAKE (0x16) message with TLS1.3 (\x03\x03).
      # The 2 length bytes are also passed, followed by the actual CRYPTO blob which contains a CLIENT HELLO or SERVER HELLO
      local length_bytes = pack(cast<uint16>(|handshake_data|), spicy::ByteOrder::Big);
      zeek::protocol_data_in(
        from_client
        , b"\x16\x03\x03" + length_bytes + handshake_data
        , context.ssl_handle
      );

      # Stop decryption attempts after processing the very first INITIAL
      # INITIAL packet for which we forwarded data to the SSL analyzer.
      if ( from_client )
        context.client_initial_processed = True;
      else
        context.server_initial_processed = True;
    }
  }
};

##############
# Entrypoints
##############
public type RequestFrame = unit {
  %context = ConnectionIDInfo;
  : Packet(True, self.context())[];
};

public type ResponseFrame = unit {
  %context = ConnectionIDInfo;
  : Packet(False, self.context())[];
};
